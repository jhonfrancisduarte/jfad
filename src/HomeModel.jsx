/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 HomeModel.glb --transform --keepmeshes --keepmaterials --format --shadows 
Files: HomeModel.glb [60.01MB] > C:\Users\user\Desktop\HomeModel-transformed.glb [2.2MB] (96%)
*/

import React, { useRef, useEffect, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'

export default function HomeModel(props) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/HomeModel-transformed.glb')
  const { actions } = useAnimations(animations, group)
  useEffect(() => {
    actions.idle.play()
  })

  const groupStyles = {
    cursor: 'pointer', // Set cursor to pointer
  };

  const thisSectionClass1 = document.querySelector('.my-canvas');
  const thisSectionClass2 = document.querySelector('.homePage');

  const toAboutPage = () => {
    const targetClass1 = document.querySelector('.my-canvas2');
    const targetClass2 = document.querySelector('.aboutMePage');
    const targetElement = document.getElementById('aboutme');

    if (targetElement) {
      thisSectionClass1.classList.remove('active');
      thisSectionClass2.classList.remove('active');
      targetClass1.classList.add('active');
      targetClass2.classList.add('active');
      targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  };

  const toMyWorksPage = () => {
    const targetClass1 = document.querySelector('.myWorksPage');
    const targetElement = document.getElementById('my-works');
    if (targetElement) {
      thisSectionClass1.classList.remove('active');
      thisSectionClass2.classList.remove('active');
      targetClass1.classList.add('active');
      targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  };

  const toContactMePage = () => {
    const targetClass1 = document.querySelector('.my-canvas3');
    const targetClass2 = document.querySelector('.contactMePage');
    const targetElement = document.getElementById('contact-me');
    if (targetElement) {
      thisSectionClass1.classList.remove('active');
      thisSectionClass2.classList.remove('active');
      targetClass1.classList.add('active');
      targetClass2.classList.add('active');
      targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  };

  const handlePointerOver = (event) => {
    const intersectedObject = event.object;
    if (intersectedObject.material.emissive !== undefined && (intersectedObject.name == "Cube001_2" ||
    intersectedObject.name == "Cube002_2" || intersectedObject.name == "Cube003_2" )) {
      intersectedObject.material.emissive.set(0x009292);
      intersectedObject.parent.position.y = -0.36;
    }
  };
  
  const handlePointerOut = (event) => {
    const intersectedObject = event.object;
    if (intersectedObject.material.emissive !== undefined && (intersectedObject.name == "Cube001_2" ||
    intersectedObject.name == "Cube002_2" || intersectedObject.name == "Cube003_2" )) {
      intersectedObject.material.emissive.set(0x000000);
      intersectedObject.parent.position.y = -0.37;
    }
  };

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" position={[0, -1.182, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorig7Hips} />
        </group>
        <group name="aboutme" position={[-1.218, -0.367, -0.1]} rotation={[0, -0.126, 0.73]} scale={[0.007, 0.269, 0.208]} onPointerDown={toAboutPage} onPointerOver={handlePointerOver}
  onPointerOut={handlePointerOut}>
          <mesh name="Cube001" castShadow receiveShadow geometry={nodes.Cube001.geometry} material={materials.Black} />
          <mesh name="Cube001_1" castShadow receiveShadow geometry={nodes.Cube001_1.geometry} material={materials.light} />
          <mesh name="Cube001_2" castShadow receiveShadow geometry={nodes.Cube001_2.geometry} material={materials.screen1} />
          <mesh name="Cube001_3" castShadow receiveShadow geometry={nodes.Cube001_3.geometry} material={materials.logo} />
        </group>
        <group name="myworks" position={[-0.214, -0.371, -1.155]} rotation={[0, -1.309, 0.73]} scale={[0.007, 0.269, 0.208]} onPointerDown={toMyWorksPage} onPointerOver={handlePointerOver}
  onPointerOut={handlePointerOut}>
          <mesh name="Cube002" castShadow receiveShadow geometry={nodes.Cube002.geometry} material={materials.Black} />
          <mesh name="Cube002_1" castShadow receiveShadow geometry={nodes.Cube002_1.geometry} material={materials.light} />
          <mesh name="Cube002_2" castShadow receiveShadow geometry={nodes.Cube002_2.geometry} material={materials.screen2} />
          <mesh name="Cube002_3" castShadow receiveShadow geometry={nodes.Cube002_3.geometry} material={materials.logo} />
        </group>
        <group name="contactme" position={[0.997, -0.37, -0.615]} rotation={[Math.PI, -0.563, -2.411]} scale={[0.007, 0.269, 0.208]} onPointerDown={toContactMePage} onPointerOver={handlePointerOver}
  onPointerOut={handlePointerOut}>
          <mesh name="Cube003" castShadow receiveShadow geometry={nodes.Cube003.geometry} material={materials.Black} />
          <mesh name="Cube003_1" castShadow receiveShadow geometry={nodes.Cube003_1.geometry} material={materials.light} />
          <mesh name="Cube003_2" castShadow receiveShadow geometry={nodes.Cube003_2.geometry} material={materials.screen3} />
          <mesh name="Cube003_3" castShadow receiveShadow geometry={nodes.Cube003_3.geometry} material={materials.logo} />
        </group>
        <skinnedMesh name="Ch33_Belt" geometry={nodes.Ch33_Belt.geometry} material={materials.Ch33_body} skeleton={nodes.Ch33_Belt.skeleton} position={[0, -1.182, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
        <skinnedMesh name="Ch33_Body" geometry={nodes.Ch33_Body.geometry} material={materials.Ch33_body} skeleton={nodes.Ch33_Body.skeleton} position={[0, -1.182, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
        <skinnedMesh name="Ch33_Hair" geometry={nodes.Ch33_Hair.geometry} material={materials.Ch33_hair} skeleton={nodes.Ch33_Hair.skeleton} position={[0, -1.182, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
        <skinnedMesh name="Ch33_Pants" geometry={nodes.Ch33_Pants.geometry} material={materials.Black} skeleton={nodes.Ch33_Pants.skeleton} position={[0, -1.182, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
        <skinnedMesh name="Ch33_Shirt" geometry={nodes.Ch33_Shirt.geometry} material={materials.white} skeleton={nodes.Ch33_Shirt.skeleton} position={[0, -1.182, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
        <skinnedMesh name="Ch33_Shoes" geometry={nodes.Ch33_Shoes.geometry} material={materials.Ch33_body} skeleton={nodes.Ch33_Shoes.skeleton} position={[0, -1.182, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
        <group name="Ch33_Suit" position={[0, -1.182, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <skinnedMesh name="Mesh001" geometry={nodes.Mesh001.geometry} material={materials.Black} skeleton={nodes.Mesh001.skeleton} />
          <skinnedMesh name="Mesh001_1" geometry={nodes.Mesh001_1.geometry} material={materials.shinyBlack} skeleton={nodes.Mesh001_1.skeleton} />
        </group>
        <skinnedMesh name="Ch33_Tie" geometry={nodes.Ch33_Tie.geometry} material={materials.Ch33_body} skeleton={nodes.Ch33_Tie.skeleton} position={[0, -1.182, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
        <skinnedMesh name="FaceBuilderHead" geometry={nodes.FaceBuilderHead.geometry} material={materials.kt_facebuilder_material} skeleton={nodes.FaceBuilderHead.skeleton} position={[0, -1.182, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.01} />
      </group>
    </group>
  )
}

useGLTF.preload('/HomeModel-transformed.glb')
